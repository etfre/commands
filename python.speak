on_load() => setState(language, python) print('python loaded')
is_active() => window.test('Visual Studio Code') && state.language == python
on_activate() => print('python language activated') engine.set_end_silence_timeout(0) engine.set_end_silence_timeout_ambiguous(0)
on_deactivate() => print('python language deactivated')

pyKeyword := continue | break | pass
pyKeywordAfter := yield | return | import | with | not
pyKeywordBetween := in | is | and | or
builtin_functions := print | length=len | any | all | open | zip | string=str | type | super | set | range | representation=repr | (is instance) = isinstance | id | min | max | input | float | integer=int
pyValue := list='[]' | dictionary='{}' | none=e32None | string="''" | (double string)='""' |  true=True | false=False

initialize <pyValue> = ' = ' $1 {left}~(len($1) + 3)
named <pyValue> = '=' $1 {left}~(len($1) + 1)
new function [<_dictation>] = 'def ():' {left}~3 snake_case($1)
new class [<_dictation>] = 'class :' {left} snake_case($1)
if statement = 'if :' {left}
else if statement = 'elif :' {left}
else statement = 'else:' {enter}
for statement = 'for i in :' {left}
main statement = "if __name__ == '__main__':" {enter} 'main()'
while statement = 'while :' {left}
read file = 'with open() as f:' {left}~7
write file = 'with open(, "w") as f:' {left}~12
keyword <pyKeyword> = $1
keyword <pyKeywordAfter> = $1 ' '
keyword <pyKeywordBetween> = ' ' $1 ' '
short key <pyKeywordBetween> = ' ' $1 ' '
call <builtin_functions> = $1 '()' {left}
call that = '()' {left}
slice = '[::]' 
new string = "''" {left}